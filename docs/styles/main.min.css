/* http://meyerweb.com/eric/tools/css/reset/
   v5.0.1 | 20191019
   License: none (public domain)
*/
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
main,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section {
  display: block;
}
/* HTML5 hidden-attribute fix for newer browsers */
*[hidden] {
  display: none;
}
body {
  line-height: 1;
}
menu,
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
.wrapper {
  max-width: 1280px;
  margin: 0 auto;
  padding-left: 30px;
  padding-right: 30px;
}
@media screen and (max-width: 992px) {
  .wrapper {
    padding-left: 20px;
    padding-right: 20px;
  }
}
@media screen and (max-width: 720px) {
  .wrapper {
    padding-left: 10px;
    padding-right: 10px;
  }
}
@media screen and (max-width: 576px) {
  .wrapper {
    padding-left: 5px;
    padding-right: 5px;
  }
}
@media screen and (max-width: 380px) {
  .wrapper {
    padding-left: 5px;
    padding-right: 5px;
  }
}
.debug {
  height: 100vh;
  position: fixed;
  width: 100%;
}
.debug > div {
  height: inherit;
  max-width: 1280px;
  margin: 0 auto;
  padding-left: 30px;
  padding-right: 30px;
}
@media screen and (max-width: 992px) {
  .debug > div {
    padding-left: 20px;
    padding-right: 20px;
  }
}
@media screen and (max-width: 720px) {
  .debug > div {
    padding-left: 10px;
    padding-right: 10px;
  }
}
@media screen and (max-width: 576px) {
  .debug > div {
    padding-left: 5px;
    padding-right: 5px;
  }
}
@media screen and (max-width: 380px) {
  .debug > div {
    padding-left: 5px;
    padding-right: 5px;
  }
}
@media screen and (max-width: 992px) {
  .debug > div {
    padding-left: 20px;
    padding-right: 20px;
  }
}
@media screen and (max-width: 720px) {
  .debug > div {
    padding-left: 10px;
    padding-right: 10px;
  }
}
@media screen and (max-width: 576px) {
  .debug > div {
    padding-left: 5px;
    padding-right: 5px;
  }
}
@media screen and (max-width: 380px) {
  .debug > div {
    padding-left: 5px;
    padding-right: 5px;
  }
}
.debug > div > div {
  height: inherit;
  display: flex;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
}
.debug > div > div > div {
  box-sizing: border-box;
  word-wrap: break-word;
  margin-left: 5px;
  margin-right: 5px;
  width: calc(100% / 24 * 1 - 10px);
  height: inherit;
  outline: 1px solid #ed00d9;
  background: rgba(0, 0, 0, 0.5);
}
body {
  background-color: #ffaa88;
}
image {
  display: block;
  margin: 0 auto;
}
/* body{
    height: 500px;
    display: flex;
    justify-content: center;
    align-items: center;
} */
h1 {
  color: #06fffb;
  font-size: 19px;
  font-family: serif;
}
h1:hover {
  color: #cb08d1;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
